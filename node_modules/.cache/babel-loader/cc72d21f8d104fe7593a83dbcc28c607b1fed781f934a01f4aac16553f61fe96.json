{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sabak\\\\OneDrive\\\\Desktop\\\\React Final\\\\my-movie-app\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\n\n// Create a context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState(\"light\");\n\n  // Toggle between light and dark theme\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\");\n  };\n  return (\n    /*#__PURE__*/\n    // Provide the theme context value\n    _jsxDEV(ThemeContext.Provider, {\n      value: {\n        theme,\n        toggleTheme\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: theme,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n// Custom hook to access the theme context\n_s(ThemeProvider, \"1NR3O0/bzzhjlLyt740h+JhxH9c=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","theme","setTheme","toggleTheme","prevTheme","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["C:/Users/sabak/OneDrive/Desktop/React Final/my-movie-app/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\n\r\n// Create a context\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [theme, setTheme] = useState(\"light\");\r\n\r\n  // Toggle between light and dark theme\r\n  const toggleTheme = () => {\r\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\r\n  };\r\n\r\n  return (\r\n    // Provide the theme context value\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      <div className={theme}>{children}</div> {/* Apply the theme class */}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to access the theme context\r\nexport const useTheme = () => useContext(ThemeContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,OAAO,CAAC;;EAE3C;EACA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAAEE,SAAS,IAAMA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACrE,CAAC;EAED;IAAA;IACE;IACAR,OAAA,CAACC,YAAY,CAACQ,QAAQ;MAACC,KAAK,EAAE;QAAEL,KAAK;QAAEE;MAAY,CAAE;MAAAJ,QAAA,gBACnDH,OAAA;QAAKW,SAAS,EAAEN,KAAM;QAAAF,QAAA,EAAEA;MAAQ;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB;EAAC;AAE5B,CAAC;;AAED;AAAAX,EAAA,CAhBaF,aAAa;AAAAc,EAAA,GAAbd,aAAa;AAiB1B,OAAO,MAAMe,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMrB,UAAU,CAACI,YAAY,CAAC;AAAA;AAACiB,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}